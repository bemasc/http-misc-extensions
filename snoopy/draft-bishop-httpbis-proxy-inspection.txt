



XMPP Working Group                                             M. Bishop
Internet-Draft                                                 Microsoft
Intended status: Standards Track                           March 2, 2017
Expires: September 3, 2017


            Inspection of Encrypted HTTP Traffic by Proxies
              draft-bishop-httpbis-proxy-inspection-latest

Abstract

   The IETF has unilaterally opposed the standardization of
   "wiretapping" features in protocols ([RFC2840]).  At the same time,
   there exist legitimate scenarios in which entities might be required
   for various reasons to inspect traffic sent from and to clients under
   their control.  For a number of reasons, such inspection cannot
   always occur within the user agent.  This document describes
   mechanisms whereby an explicitly configured proxy can, with the
   consent of the user agent, examine the contents of client network
   traffic.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 3, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Bishop                  Expires September 3, 2017               [Page 1]

Internet-Draft            Inspection by Proxies               March 2017


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Existing HTTP Proxy Usage . . . . . . . . . . . . . . . .   3
   2.  Insisting on Inspection . . . . . . . . . . . . . . . . . . .   4
   3.  Providing Inspected Access  . . . . . . . . . . . . . . . . .   4
     3.1.  The INSPECTED_CONNECT method  . . . . . . . . . . . . . .   4
       3.1.1.  Tunnel Establishment  . . . . . . . . . . . . . . . .   6
       3.1.2.  Client Use of Tunnel  . . . . . . . . . . . . . . . .   6
   4.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   6
     4.1.  Normative References  . . . . . . . . . . . . . . . . . .   6
     4.2.  Informative References  . . . . . . . . . . . . . . . . .   7
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   7

1.  Introduction

   Vendors of HTTP proxies (see [RFC7230], Section 2.3) have
   historically provided a number of services at the edge of managed
   networks.  Whether due to virus scanning, blocking exfiltration of
   corporate data, or limiting what resources can be accessed from
   machines under their authority, one of the most common reasons to
   install an intermediary is blocking requests.

   At the same time, increasing desires for privacy and security online
   have increased the required use of TLS for encryption and
   authentication [RFC6797].  The only solution available to proxy
   vendors so far has been to deploy man-in-the-middle proxies,
   intercepting either the raw traffic or the contents of HTTP CONNECT
   tunnels [RFC7231] and responding with forged certificates from a
   captive private Certificate Authority.  (Because the clients in these
   scenarios are owned and managed by the same entity as the proxy, the
   clients are configured to trust this Certificate Authority.)

   This has created an arms-race between user agents and proxies: User
   agents deploy mechanisms such as certificate key pinning [RFC7469] to
   detect man-in-the-middle certificates; enterprises request management
   mechanisms to disable this feature.  Because the entities performing
   the monitoring often have legal mandates to inspect the traffic, they
   will continue to attempt to do so.  Because user agents correctly
   prioritize the security and privacy of their users, they will
   continue to invest in mechanisms to detect tampering with
   connections.




Bishop                  Expires September 3, 2017               [Page 2]

Internet-Draft            Inspection by Proxies               March 2017


   This document proposes a mechanism whereby a configured HTTP proxy
   can inform clients that it will not permit a particular connection
   without being able to inspect the contents.  Clients are fully aware
   of the proxy's inspection, and servers have the option to be aware of
   the proxy's inspection as well.  Participating servers are able to
   achieve an integrity-protected connection with the client which can
   be inspected only by the proxy.

   This enables clients, servers, and proxies to make informed decisions
   about whether to proceed with a connection given a known level of
   privacy.  It also permits user agents to provide detailed information
   to users about the proxy and its level of access to their traffic.

   This document specifically addresses the case where the same entity
   exercise management over both the client devices and the proxy
   server, and assumes some ability to configure the clients and enforce
   application capabilities.  The case where no such administrative
   control exists is specifically outside the scope of this document.

1.1.  Existing HTTP Proxy Usage

   When an explicitly-configured HTTP proxy is in use, HTTP clients make
   requests in two ways:

   o  Regular HTTP requests in absolute-form (see [RFC7230],
      Section 5.3.2), e.g.  GET http://www.example.com/

   o  CONNECT requests in authority-form (see [RFC7230], Section 5.3.3),
      e.g.  CONNECT www.example.com:443, over which the client performs
      a TLS exchange

   While not mandated by the HTTP specification, nearly all clients use
   absolute-form requests (in which the proxy sees the request and
   response) for "http"-schemed origins and authority-form CONNECT
   requests (in which the proxy sees only a TLS connection) for "https"-
   schemed origins.

   For proxies which only permit requests in which they can inspect the
   content of the request and response, they typically respond to
   CONNECT requests with a forged certificate for the end server.  The
   client's requests (if deemed acceptable) are then relayed to the end
   server, just as they would have been had the client made an absolute-
   form request for the resource.

   The client might be able to detect that the server has done so using
   mechanisms such as certificate pinning, both through pre-loaded lists
   of known site pins and the HTTP Public-Key-Pinning protocol
   [RFC7469].  However, they cannot easily distinguish an inspecting



Bishop                  Expires September 3, 2017               [Page 3]

Internet-Draft            Inspection by Proxies               March 2017


   proxy from an attack, despite the fact that they have been explicitly
   configured to trust the proxy.  To "solve" this, clients are
   typically configured to disable mechanisms which would enable them to
   detect an attack.

   A client could legitimately make an absolute-form request for an
   "https" response.  However, the client would be unable to see the
   certificate of the origin server, and would therefore be unable to
   achieve the level of authentication generally expected from "https"
   resources.  When the client is configured to trust the proxy, this
   could be considered acceptable (since the proxy will presumably
   validate the certificate), but opens the client to attacks from the
   proxy.

2.  Insisting on Inspection

   Proxies which require access to the request currently have no way to
   request it.  Proxies which implement the remainder of this
   specification MAY permit uninspected TLS connections to any endpoint.
   In this case, CONNECT requests from clients should continue to
   succeed and result in an actual tunnel to the origin server as
   specified in [RFC7231].

   If a proxy is unwilling to allow a CONNECT request, but would allow
   the client to make requests to the specified host if it were able to
   see the unencrypted data, the server SHOULD respond to the CONNECT
   request with a status code 405.  In the Allow header, the proxy MUST
   include the INSPECTED_CONNECT method defined in Section 3.1.

   User agents, with appropriate user consent, MAY retry the request
   using INSPECTED_CONNECT rather than CONNECT.  Note that user agents
   which do not support INSPECTED_CONNECT will be unable to proceed.

3.  Providing Inspected Access

3.1.  The INSPECTED_CONNECT method

   The INSPECTED_CONNECT method requests that the recipient establish an
   encrypted tunnel to the destination origin server identified by the
   request-target.  If successful, the client will use this tunnel as
   specified by this document.  The proxy will inspect and forward
   packets in both directions until the tunnel is closed, but will not
   modify packets.  Based on the results of its inspection, the server
   MAY terminate the tunnel at any time.

   INSPECTED_CONNECT is intended only for use in requests to a proxy.
   An origin server that receives a INSPECTED_CONNECT request for itself
   MAY respond with a 2xx (Successful) status code to indicate that a



Bishop                  Expires September 3, 2017               [Page 4]

Internet-Draft            Inspection by Proxies               March 2017


   connection is established.  However, most origin servers will not
   implement INSPECTED_CONNECT.

   A client sending an INSPECTED_CONNECT request MUST send the authority
   form of request-target (Section 5.3 of [RFC7230]); i.e., the request-
   target consists of only the host name and port number of the tunnel
   destination, separated by a colon.  The client MUST also include the
   ALPN header [RFC7639], identifying the protocol it proposes to speak
   to the tunnel destination.

   For example,

   INSPECTED_CONNECT server.example.com:80 HTTP/1.1
   Host: server.example.com:80
   ALPN: h2, http%2F1.1

   The server attempts to establish one of two tunnel types, as
   described in Section 3.1.1, and reports the tunnel type to the client
   as described in Section 3.1.2.

   A tunnel is closed when a tunnel intermediary detects that either
   side has closed its connection: the intermediary MUST attempt to send
   any outstanding data that came from the closed side to the other
   side, close both connections, and then discard any remaining data
   left undelivered.

   Proxy authentication might be used to establish the authority to
   create a tunnel.  For example,

   CONNECT server.example.com:80 HTTP/1.1
   Host: server.example.com:80
   Proxy-Authorization: basic aGVsbG86d29ybGQ=

   There are significant risks in establishing a tunnel to arbitrary
   servers, particularly when the destination is a well-known or
   reserved TCP port that is not intended for Web traffic.  For example,
   an INSPECTED_CONNECT to a request-target of "example.com:25" would
   suggest that the proxy connect to the reserved port for SMTP traffic;
   if allowed, that could trick the proxy into relaying spam email.
   Proxies that support INSPECTED_CONNECT SHOULD restrict its use to a
   limited set of known ports or a configurable whitelist of safe
   request targets, and SHOULD verify that the client is actually
   speaking the protocol which it proposed to speak.

   A server MUST NOT send any Transfer-Encoding or Content-Length header
   fields in a 2xx (Successful) response to INSPECTED_CONNECT.  A client
   MUST ignore any Content-Length or Transfer-Encoding header fields
   received in a successful response to INSPECTED_CONNECT.



Bishop                  Expires September 3, 2017               [Page 5]

Internet-Draft            Inspection by Proxies               March 2017


   A payload within an INSPECTED_CONNECT request message has no defined
   semantics; sending a payload body on an INSPECTED_CONNECT request
   might cause some implementations to reject the request.

   Responses to the INSPECTED_CONNECT method are not cacheable.

3.1.1.  Tunnel Establishment

   In handling an INSPECTED_CONNECT request, the server MUST attempt to
   establish an encrypted tunnel to the identified origin server.  The
   encrypted tunnel MUST use TLS [RFC5426] and MUST include the ALPN
   extension [RFC7301].  The protocols proposed in ALPN MUST include:

   o  Each protocol in the client's ALPN header, prefixed with the
      string "inspected_".  That is, if the client sent "h2,
      http%2F1.1", the server would include the ALPN tokens
      "inspected_h2" and "inspected_http/1.1".

   o  Each protocol in the client's ALPN header

   If the origin server supports inspected tunnels and is willing to
   accept an inspected connection, it SHOULD select one of the
   "inspected_" ALPN tokens.  If the origin server is not willing to
   accept inspection, it SHOULD respond with a fatal
   "no_application_protocol" alert.

   An origin server SHOULD NOT select one of the client's ALPN tokens if
   it implements this protocol.

3.1.2.  Client Use of Tunnel

4.  References

4.1.  Normative References

   [RFC5426]  Okmianski, A., "Transmission of Syslog Messages over UDP",
              RFC 5426, DOI 10.17487/RFC5426, March 2009,
              <http://www.rfc-editor.org/info/rfc5426>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.



Bishop                  Expires September 3, 2017               [Page 6]

Internet-Draft            Inspection by Proxies               March 2017


   [RFC7301]  Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application-Layer Protocol
              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,
              July 2014, <http://www.rfc-editor.org/info/rfc7301>.

   [RFC7639]  Hutton, A., Uberti, J., and M. Thomson, "The ALPN HTTP
              Header Field", RFC 7639, DOI 10.17487/RFC7639, August
              2015, <http://www.rfc-editor.org/info/rfc7639>.

4.2.  Informative References

   [RFC2840]  Altman, J. and F. da Cruz, "TELNET KERMIT OPTION",
              RFC 2840, DOI 10.17487/RFC2840, May 2000,
              <http://www.rfc-editor.org/info/rfc2840>.

   [RFC6797]  Hodges, J., Jackson, C., and A. Barth, "HTTP Strict
              Transport Security (HSTS)", RFC 6797,
              DOI 10.17487/RFC6797, November 2012,
              <http://www.rfc-editor.org/info/rfc6797>.

   [RFC7469]  Evans, C., Palmer, C., and R. Sleevi, "Public Key Pinning
              Extension for HTTP", RFC 7469, DOI 10.17487/RFC7469, April
              2015, <http://www.rfc-editor.org/info/rfc7469>.

Author's Address

   Mike Bishop
   Microsoft

   Email: michael.bishop@microsoft.com





















Bishop                  Expires September 3, 2017               [Page 7]
