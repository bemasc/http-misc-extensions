



XMPP Working Group                                             M. Bishop
Internet-Draft                                                 Microsoft
Intended status: Standards Track                          March 10, 2017
Expires: September 11, 2017


            Inspection of Encrypted HTTP Traffic by Proxies
              draft-bishop-httpbis-proxy-inspection-latest

Abstract

   The IETF has unilaterally opposed the standardization of
   "wiretapping" features in protocols ([RFC2804]).  At the same time,
   there exist legitimate scenarios in which entities might be required
   for various reasons to inspect traffic sent from and to clients under
   their control.  For a number of reasons, such inspection cannot
   always occur within the user agent.  This document describes
   mechanisms whereby an explicitly configured proxy can, with the
   consent of the user agent, examine the contents of client network
   traffic.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 11, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Bishop                 Expires September 11, 2017               [Page 1]

Internet-Draft            Inspection by Proxies               March 2017


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Existing HTTP Proxy Usage . . . . . . . . . . . . . . . .   3
   2.  Insisting on Inspection . . . . . . . . . . . . . . . . . . .   4
   3.  Providing Inspected Access  . . . . . . . . . . . . . . . . .   4
     3.1.  The INSPECTED_CONNECT method  . . . . . . . . . . . . . .   4
       3.1.1.  Tunnel Establishment  . . . . . . . . . . . . . . . .   6
       3.1.2.  Use of Encrypted Tunnel . . . . . . . . . . . . . . .   7
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .   7
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   8
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .   8
     6.2.  Informative References  . . . . . . . . . . . . . . . . .   9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   9

1.  Introduction

   Vendors of HTTP proxies (see [RFC7230], Section 2.3) have
   historically provided a number of services at the edge of managed
   networks.  Whether due to virus scanning, blocking exfiltration of
   corporate data, or limiting what resources can be accessed from
   machines under their authority, one of the most common reasons to
   install an intermediary is blocking requests.

   At the same time, increasing desires for privacy and security online
   have increased the required use of TLS for encryption and
   authentication [RFC6797].  The only solution available to proxy
   vendors so far has been to deploy man-in-the-middle proxies,
   intercepting either the raw traffic or the contents of HTTP CONNECT
   tunnels [RFC7231] and responding with forged certificates from a
   captive private Certificate Authority.  (Because the clients in these
   scenarios are owned and managed by the same entity as the proxy, the
   clients are configured to trust this Certificate Authority.)

   This has created an arms-race between user agents and proxies: User
   agents deploy mechanisms such as certificate key pinning [RFC7469] to
   detect man-in-the-middle certificates; enterprises request management
   mechanisms to disable this feature.  Because the entities performing
   the monitoring often have legal mandates to inspect the traffic, they
   will continue to attempt to do so.  Because user agents correctly
   prioritize the security and privacy of their users, they will




Bishop                 Expires September 11, 2017               [Page 2]

Internet-Draft            Inspection by Proxies               March 2017


   continue to invest in mechanisms to detect tampering with
   connections.

   This document proposes a mechanism whereby a configured HTTP proxy
   can inform clients that it will not permit a particular connection
   without being able to inspect the contents.  Clients are fully aware
   of the proxy's inspection, and servers have the option to be aware of
   the proxy's inspection as well.  Participating servers are able to
   achieve an integrity-protected connection with the client which can
   be inspected only by the proxy.

   This enables clients, servers, and proxies to make informed decisions
   about whether to proceed with a connection given a known level of
   privacy.  It also permits user agents to provide detailed information
   to users about the proxy and its level of access to their traffic.
   Because at least one, and potentially all, parties are aware that the
   inspection is occurring, this does not qualify as "wiretapping" as
   defined by [RFC2804].

   This document specifically addresses the case where the same entity
   exercise management over both the client devices and the proxy
   server, and assumes some ability to configure the clients and enforce
   application capabilities.  The case where no such administrative
   control exists is specifically outside the scope of this document.

1.1.  Existing HTTP Proxy Usage

   When an explicitly-configured HTTP proxy is in use, HTTP clients make
   requests in two ways:

   o  Regular HTTP requests in absolute-form (see [RFC7230],
      Section 5.3.2), e.g.  GET http://www.example.com/

   o  CONNECT requests in authority-form (see [RFC7230], Section 5.3.3),
      e.g.  CONNECT www.example.com:443, over which the client performs
      a TLS exchange

   While not mandated by the HTTP specification, nearly all clients use
   absolute-form requests (in which the proxy sees the request and
   response) for "http"-schemed origins and authority-form CONNECT
   requests (in which the proxy sees only a TLS connection) for "https"-
   schemed origins.

   For proxies which only permit requests in which they can inspect the
   content of the request and response, they typically respond to
   CONNECT requests with a forged certificate for the end server.  The
   client's requests (if deemed acceptable) are then relayed to the end




Bishop                 Expires September 11, 2017               [Page 3]

Internet-Draft            Inspection by Proxies               March 2017


   server, just as they would have been had the client made an absolute-
   form request for the resource.

   The client might be able to detect that the server has done so using
   mechanisms such as certificate pinning, both through pre-loaded lists
   of known site pins and the HTTP Public-Key-Pinning protocol
   [RFC7469].  However, they cannot easily distinguish an inspecting
   proxy from an attack, despite the fact that they have been explicitly
   configured to trust the proxy.  To "solve" this, clients are
   typically configured to disable mechanisms which would enable them to
   detect an attack.

   A client could legitimately make an absolute-form request for an
   "https" response.  However, the client would be unable to see the
   certificate of the origin server, and would therefore be unable to
   achieve the level of authentication generally expected from "https"
   resources.  When the client is configured to trust the proxy, this
   could be considered acceptable (since the proxy will presumably
   validate the certificate), but opens the client to attacks from the
   proxy.

2.  Insisting on Inspection

   Proxies which require access to the request currently have no way to
   request it.  Proxies which implement the remainder of this
   specification MAY permit uninspected TLS connections to any endpoint.
   In this case, CONNECT requests from clients should continue to
   succeed and result in an actual tunnel to the origin server as
   specified in [RFC7231].

   If a proxy is unwilling to allow a CONNECT request, but would allow
   the client to make requests to the specified host if it were able to
   see the unencrypted data, the server SHOULD respond to the CONNECT
   request with a status code 405.  In the Allow header, the proxy MUST
   include the INSPECTED_CONNECT method defined in Section 3.1.

   User agents, with appropriate user consent, MAY retry the request
   using INSPECTED_CONNECT rather than CONNECT.  Note that user agents
   which do not support INSPECTED_CONNECT will be unable to proceed.

3.  Providing Inspected Access

3.1.  The INSPECTED_CONNECT method

   The INSPECTED_CONNECT method requests that the recipient establish an
   encrypted tunnel to the destination origin server identified by the
   request-target.  If successful, the client will use this tunnel as
   specified by this document.  The proxy will inspect and forward



Bishop                 Expires September 11, 2017               [Page 4]

Internet-Draft            Inspection by Proxies               March 2017


   packets in both directions until the tunnel is closed, but will not
   modify packets.  Based on the results of its inspection, the server
   MAY terminate the tunnel at any time.

   INSPECTED_CONNECT is intended only for use in requests to a proxy.
   An origin server that receives a INSPECTED_CONNECT request for itself
   MAY respond with a 2xx (Successful) status code to indicate that a
   connection is established.  However, most origin servers will not
   implement INSPECTED_CONNECT.

   A client sending an INSPECTED_CONNECT request MUST send the authority
   form of request-target (Section 5.3 of [RFC7230]); i.e., the request-
   target consists of only the host name and port number of the tunnel
   destination, separated by a colon.  The client MUST also include the
   ALPN header [RFC7639], identifying the protocol it proposes to speak
   to the tunnel destination.

   For example,

   INSPECTED_CONNECT server.example.com:80 HTTP/1.1
   Host: server.example.com:80
   ALPN: h2, http%2F1.1

   The server attempts to establish one of two tunnel types, as
   described in Section 3.1.1, and reports the tunnel type to the client
   as described in Section 3.1.2.

   A tunnel is closed when a tunnel intermediary detects that either
   side has closed its connection: the intermediary MUST attempt to send
   any outstanding data that came from the closed side to the other
   side, close both connections, and then discard any remaining data
   left undelivered.

   Proxy authentication might be used to establish the authority to
   create a tunnel.  For example,

   INSPECTED_CONNECT server.example.com:80 HTTP/1.1
   Host: server.example.com:80
   ALPN: h2, http%2F1.1
   Proxy-Authorization: basic aGVsbG86d29ybGQ=

   There are risks in establishing a tunnel to arbitrary servers,
   particularly when the destination is a well-known or reserved TCP
   port that is not intended for Web traffic.  This is largely mitigated
   by the use of TLS and the requirement to successfully negotiate a
   protocol using ALPN.  However, proxies that support INSPECTED_CONNECT
   SHOULD restrict its use to a limited set of known ports or a
   configurable whitelist of safe request targets, and SHOULD verify



Bishop                 Expires September 11, 2017               [Page 5]

Internet-Draft            Inspection by Proxies               March 2017


   that the client is actually speaking the protocol which it proposed
   to speak.

   A server MUST NOT send any Transfer-Encoding or Content-Length header
   fields in a 2xx (Successful) response to INSPECTED_CONNECT.  A client
   MUST ignore any Content-Length or Transfer-Encoding header fields
   received in a successful response to INSPECTED_CONNECT.

   A payload within an INSPECTED_CONNECT request message has no defined
   semantics; sending a payload body on an INSPECTED_CONNECT request
   might cause some implementations to reject the request.

   Responses to the INSPECTED_CONNECT method are not cacheable.

3.1.1.  Tunnel Establishment

   In handling an INSPECTED_CONNECT request, the server MUST attempt to
   establish an encrypted tunnel to the identified origin server.  The
   encrypted tunnel MUST use TLS [RFC5426] and MUST include the ALPN
   extension [RFC7301].  The proxy MAY remove from the client's ALPN
   list protocols it is not prepared to inspect.

   The protocols proposed in ALPN MUST include each acceptable protocol
   in the client's ALPN header, prefixed with "inspected_".  That is, if
   the client sent the ALPN header "h2, http%2F1.1", the server would
   include the ALPN tokens "inspected_h2" and "inspected_http/1.1".
   Optionally, the proxy MAY include protocols it is capable of using to
   relay requests from clients.

   If the origin server supports inspected tunnels and is willing to
   accept an inspected connection, it SHOULD select one of the
   "inspected_" ALPN tokens.  If the origin server is not willing to
   accept inspection, it SHOULD respond with a fatal
   "no_application_protocol" alert.

   An origin server SHOULD NOT select a non-"inspected_" token if it
   implements this protocol and an "inspected_" token is present.
   Selection of an uninspected protocol token indicates that the origin
   server is unaware of inspection.  The proxy MUST NOT consider the
   tunnel connection successful in this case, but MAY retain the
   completed TLS connection to relay client request.  Proxies MAY cache
   that origin servers do not support this protocol, in order to return
   errors more quickly when appropriate.

   The proxy MUST validate the certificate presented by the origin
   server, and MUST NOT consider the tunnel successfully established if
   the certificate cannot be validated.




Bishop                 Expires September 11, 2017               [Page 6]

Internet-Draft            Inspection by Proxies               March 2017


   If a proxy cannot reach the origin server directly, it MAY establish
   its own tunneled connection using CONNECT or INSPECTED_CONNECT as
   needed.

3.1.2.  Use of Encrypted Tunnel

   If the origin server accepts the connection, the proxy completes the
   INSPECTED_CONNECT request with status code 200 (Success).  The
   remainder of the connection (in HTTP/1.1) or stream (in HTTP/2) is a
   tunnel which is encrypted between the proxy and the origin server.
   The proxy's response SHOULD include an ALPN header specifying the
   protocol selected by the origin server on the proxy's connection.

   If the selected protocol is an "inspected_" token, the client MUST
   proceed by establishing a TLS [RFC5246] connection, but proposing
   only NULL encryption.  (A non-NULL key exchange and MAC MUST be
   negotiated.)  The client MUST include the ALPN extension and the
   token for the uninspected protocol on this inner TLS connection.  The
   server MUST accept the client's NULL encryption.  Confidentiality is
   provided by the TLS session between the proxy and the origin server.

   If the origin server did not demonstrate support for this protocol,
   the server MUST return a status code 502 (Bad Gateway).  The client
   MAY then issue requests for "https" resources directly to the proxy
   using absolute-form, but cannot have assurance that the proxy is not
   modifying the responses.

4.  Security Considerations

   This protocol intentionally allows multiple parties to an HTTP
   exchange to make security trade-offs.  Proxies have the choice of
   permitting clients to make fully-encrypted connections to certain
   endpoints (existing CONNECT).  Alternatively, the proxy can force the
   client to choose between disclosing the contents of the exchange or
   not performing the exchange.

   Clients that choose to disclose the contents of the exchange face a
   second junction based on origin server support (and, potentially, the
   honesty of the proxy).  When the origin server supports this
   protocol, the client is able to receive and validate the origin
   server's certificate.  The client SHOULD apply all available
   tampering-detection mechanisms in this circumstance and MAY exclude
   administratively-configured root certificates from the set considered
   trusted.

   If the origin server does not support this protocol, the client will
   be unable to verify the server's certificate itself.  It MAY trust




Bishop                 Expires September 11, 2017               [Page 7]

Internet-Draft            Inspection by Proxies               March 2017


   the proxy's validation of the certificate, or refuse to proceed with
   the request.

   In the event that multiple proxies must be traversed to reach the
   origin server, the client can only verify the identity of the first
   proxy.  Even if no other proxy server is involved in the connection,
   the proxy is fully able to relay the contents of the client's
   connection to other parties in real time or to store them and provide
   them at a later time.  This is inherent in the power of inspection.

   In each of these cases, user consent MUST be obtained for anything
   less than an end-to-end encrypted and authenticated connection.  As a
   convenience, this consent MAY be persistent for a given proxy server,
   but some indication SHOULD be provided to the user at all times when
   a connection is known to be inspected.

   When CONNECT is used to establish a tunnel via a proxy, the contents
   of the tunnel are typically encrypted end-to-end.  As a result, the
   use of TLS when connecting to the proxy is less critical.  The
   INSPECTED_CONNECT method provides encryption only between the proxy
   and the origin server; as a result, it SHOULD only be used over a TLS
   connection to the proxy.

5.  IANA Considerations

   If it had even a snowball's chance of becoming an RFC, this document
   would need to register:

   o  the INSPECTED_CONNECT method,

   o  the inspected_* ALPN token collection, and

   o  possibly the "ALPN" header as a response header.

   But as that is not the case, this document makes no requests of IANA.

6.  References

6.1.  Normative References

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <http://www.rfc-editor.org/info/rfc5246>.

   [RFC5426]  Okmianski, A., "Transmission of Syslog Messages over UDP",
              RFC 5426, DOI 10.17487/RFC5426, March 2009,
              <http://www.rfc-editor.org/info/rfc5426>.



Bishop                 Expires September 11, 2017               [Page 8]

Internet-Draft            Inspection by Proxies               March 2017


   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

   [RFC7301]  Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application-Layer Protocol
              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,
              July 2014, <http://www.rfc-editor.org/info/rfc7301>.

   [RFC7639]  Hutton, A., Uberti, J., and M. Thomson, "The ALPN HTTP
              Header Field", RFC 7639, DOI 10.17487/RFC7639, August
              2015, <http://www.rfc-editor.org/info/rfc7639>.

6.2.  Informative References

   [RFC2804]  IAB and IESG, "IETF Policy on Wiretapping", RFC 2804,
              DOI 10.17487/RFC2804, May 2000,
              <http://www.rfc-editor.org/info/rfc2804>.

   [RFC6797]  Hodges, J., Jackson, C., and A. Barth, "HTTP Strict
              Transport Security (HSTS)", RFC 6797,
              DOI 10.17487/RFC6797, November 2012,
              <http://www.rfc-editor.org/info/rfc6797>.

   [RFC7469]  Evans, C., Palmer, C., and R. Sleevi, "Public Key Pinning
              Extension for HTTP", RFC 7469, DOI 10.17487/RFC7469, April
              2015, <http://www.rfc-editor.org/info/rfc7469>.

Author's Address

   Mike Bishop
   Microsoft

   Email: michael.bishop@microsoft.com











Bishop                 Expires September 11, 2017               [Page 9]
